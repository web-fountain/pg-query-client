.panel-layout {
  /* AIDEV-NOTE: panels do not scroll; inner content containers should; grid area controls layout */
  /* AIDEV-NOTE: Width custom properties are controlled on :root by the provider; do NOT set here or updates won't propagate */
  --op-space-layout-gap:                   var(--space-4);
  --op-space-layout-panel-collapsed-width: 48px;

  /* AIDEV-NOTE: Screen-aware layout calculations using screen dimension variables */
  --calculated-panel-max-width: min(
    var(--op-space-layout-panel-max-width),
    calc(var(--screen-width) * 1px * 0.35) /* max 35% of screen width */
  );
  --calculated-center-min-width: max(
    var(--op-space-layout-panel-min-width),
    calc(var(--screen-width) * 1px * 0.3) /* min 30% of screen width */
  );

  /* AIDEV-NOTE: Enable container queries for component-scoped responsiveness */
  container-type: inline-size;
  container-name: panel-layout;

  display: grid;
  /* AIDEV-NOTE: Enhanced clamp with screen-aware max widths */
  grid-template-columns:
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-left-panel-width),
      var(--calculated-panel-max-width)
    )
    0
    minmax(var(--calculated-center-min-width), 1fr)
    0
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-right-panel-width),
      var(--calculated-panel-max-width)
    );

  grid-template-areas:
    'left handle-left center handle-right right';

  /* AIDEV-NOTE: Fill the grid area allocated by OpSpaceLayout (1fr row) */
  height: 100%;
  min-height: 0;

  /* AIDEV-NOTE: Avoid using grid gap as clickable gutter; resizer columns are explicit elements */
  gap: 0;
  background: var(--surface-1);
  color: var(--text-primary);
  transition: grid-template-columns var(--duration-250) var(--ease-standard);
}

/* AIDEV-NOTE: Swapped visual layout â€“ move right panel to the left and left panel to the right */
.panel-layout[data-content-swapped] {
  grid-template-columns:
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-right-panel-width),
      var(--calculated-panel-max-width)
    )
    0
    minmax(var(--calculated-center-min-width), 1fr)
    0
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-left-panel-width),
      var(--calculated-panel-max-width)
    );
  grid-template-areas:
    'right handle-right center handle-left left';
}

/* AIDEV-NOTE: Disable grid transition during active drag for responsive feel */
:root[data-op-space-layout-dragging] .panel-layout {
  transition: none;
}

.panel-layout .left-side,
.panel-layout .center,
.panel-layout .right-side {
  /* AIDEV-NOTE: Let track sizing enforce min/max; collapsed tracks can be 0 without overflow */
  min-width: 0;
  overflow: hidden;
  height: 100%;
}
.panel-layout .left-side {
  grid-area: left;
}
.panel-layout .center {
  grid-area: center;
}
.panel-layout .right-side {
  grid-area: right;
}
.panel-layout .handle-left,
.panel-layout .handle-right {
  inline-size: 0;
  block-size: 100%;
  cursor: col-resize;
}
.panel-layout .handle-left {
  grid-area: handle-left;
}
.panel-layout .handle-right {
  grid-area: handle-right;
}

/* Swap: mirror grid areas so right shows on the left side */
/* AIDEV-NOTE: Static grid; content swap is state-only and handled in React */

/* Collapse: minimum panel column but keep handle visible */
.panel-layout[data-left-collapsed] {
  grid-template-columns:
    var(--op-space-layout-panel-collapsed-width)
    0
    minmax(var(--calculated-center-min-width), 1fr)
    0
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-right-panel-width),
      var(--calculated-panel-max-width)
    );
}
.panel-layout[data-content-swapped][data-left-collapsed] {
  grid-template-columns:
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-right-panel-width),
      var(--calculated-panel-max-width)
    )
    0
    minmax(var(--calculated-center-min-width), 1fr)
    0
    var(--op-space-layout-panel-collapsed-width);
}
:root[data-op-space-left-collapsed] .panel-layout:not([data-left-collapsed]) {
  grid-template-columns:
    var(--op-space-layout-panel-collapsed-width)
    var(--op-space-layout-resizer-width)
    minmax(var(--calculated-center-min-width), 1fr)
    var(--op-space-layout-resizer-width)
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-right-panel-width),
      var(--calculated-panel-max-width)
    );
}
:root[data-op-space-left-collapsed] .panel-layout[data-content-swapped]:not([data-left-collapsed]) {
  grid-template-columns:
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-right-panel-width),
      var(--calculated-panel-max-width)
    )
    var(--op-space-layout-resizer-width)
    minmax(var(--calculated-center-min-width), 1fr)
    var(--op-space-layout-resizer-width)
    var(--op-space-layout-panel-collapsed-width);
}
.panel-layout[data-right-collapsed] {
  grid-template-columns:
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-left-panel-width),
      var(--calculated-panel-max-width)
    )
    0
    minmax(var(--calculated-center-min-width), 1fr)
    0
    var(--op-space-layout-panel-collapsed-width);
}
:root[data-op-space-right-collapsed] .panel-layout[data-content-swapped]:not([data-right-collapsed]) {
  grid-template-columns:
    var(--op-space-layout-panel-collapsed-width)
    var(--op-space-layout-resizer-width)
    minmax(var(--calculated-center-min-width), 1fr)
    var(--op-space-layout-resizer-width)
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-left-panel-width),
      var(--calculated-panel-max-width)
    );
}
.panel-layout[data-content-swapped][data-right-collapsed] {
  grid-template-columns:
    var(--op-space-layout-panel-collapsed-width)
    0
    minmax(var(--calculated-center-min-width), 1fr)
    0
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-left-panel-width),
      var(--calculated-panel-max-width)
    );
}
:root[data-op-space-right-collapsed] .panel-layout:not([data-right-collapsed]) {
  grid-template-columns:
    clamp(
      var(--op-space-layout-panel-min-width),
      var(--op-space-layout-left-panel-width),
      var(--calculated-panel-max-width)
    )
    var(--op-space-layout-resizer-width)
    minmax(var(--calculated-center-min-width), 1fr)
    var(--op-space-layout-resizer-width)
    var(--op-space-layout-panel-collapsed-width);
}

/* AIDEV-NOTE: Collapsed panels now show at 40px width with icon-only content */

/* Optional visuals */
/* AIDEV-NOTE: Side panel borders only on inner edges */
.panel-layout .left-side {
  border-inline-end: var(--border-1) solid var(--border-color);
  background: var(--surface-1);
}
.panel-layout .right-side {
  border-inline-start: var(--border-1) solid var(--border-color);
  background: var(--surface-1);
}
.panel-layout .center {
  background: var(--surface-1);
}

/* AIDEV-NOTE: Collapses under swapped layout must mirror to correct columns */
/* AIDEV-NOTE: Swapped-specific track rules removed; grid does not mirror */

/* AIDEV-NOTE: When both sides are collapsed, keep both handles visible for user interaction */
.panel-layout[data-left-collapsed][data-right-collapsed] {
  grid-template-columns:
    var(--op-space-layout-panel-collapsed-width)
    0
    minmax(0, 1fr)
    0
    var(--op-space-layout-panel-collapsed-width);
}

/* AIDEV-NOTE: Container queries for component-scoped responsive behavior */
@container panel-layout (max-width: 768px) {
  .panel-layout {
    --calculated-panel-max-width: calc(100cqi - 100px);
    --calculated-center-min-width: 200px;
    /* Force mobile layout on small container */
    grid-template-columns: 1fr !important;
    grid-template-areas: 'center' !important;
  }

  .panel-layout .left-side,
  .panel-layout .right-side,
  .panel-layout .handle-left,
  .panel-layout .handle-right {
    display: none;
  }
}

@container panel-layout (min-width: 1920px) {
  .panel-layout {
    --calculated-panel-max-width: min(800px, 40cqi);
  }
}
